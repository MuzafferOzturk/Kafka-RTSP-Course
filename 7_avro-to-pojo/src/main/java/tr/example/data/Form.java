/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package tr.example.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Form extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4506617670186526111L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Form\",\"namespace\":\"tr.example.data\",\"fields\":[{\"name\":\"user\",\"type\":{\"type\":\"record\",\"name\":\"User\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"surname\",\"type\":\"string\"}]}},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"addressType\",\"type\":\"string\"},{\"name\":\"phoneList\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Form> ENCODER =
      new BinaryMessageEncoder<Form>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Form> DECODER =
      new BinaryMessageDecoder<Form>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Form> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Form> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Form> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Form>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Form to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Form from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Form instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Form fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public tr.example.data.User user;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence street;
  @Deprecated public java.lang.CharSequence addressType;
  @Deprecated public java.util.List<java.lang.CharSequence> phoneList;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Form() {}

  /**
   * All-args constructor.
   * @param user The new value for user
   * @param city The new value for city
   * @param street The new value for street
   * @param addressType The new value for addressType
   * @param phoneList The new value for phoneList
   */
  public Form(tr.example.data.User user, java.lang.CharSequence city, java.lang.CharSequence street, java.lang.CharSequence addressType, java.util.List<java.lang.CharSequence> phoneList) {
    this.user = user;
    this.city = city;
    this.street = street;
    this.addressType = addressType;
    this.phoneList = phoneList;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return user;
    case 1: return city;
    case 2: return street;
    case 3: return addressType;
    case 4: return phoneList;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: user = (tr.example.data.User)value$; break;
    case 1: city = (java.lang.CharSequence)value$; break;
    case 2: street = (java.lang.CharSequence)value$; break;
    case 3: addressType = (java.lang.CharSequence)value$; break;
    case 4: phoneList = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'user' field.
   * @return The value of the 'user' field.
   */
  public tr.example.data.User getUser() {
    return user;
  }


  /**
   * Sets the value of the 'user' field.
   * @param value the value to set.
   */
  public void setUser(tr.example.data.User value) {
    this.user = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'street' field.
   * @return The value of the 'street' field.
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }


  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'addressType' field.
   * @return The value of the 'addressType' field.
   */
  public java.lang.CharSequence getAddressType() {
    return addressType;
  }


  /**
   * Sets the value of the 'addressType' field.
   * @param value the value to set.
   */
  public void setAddressType(java.lang.CharSequence value) {
    this.addressType = value;
  }

  /**
   * Gets the value of the 'phoneList' field.
   * @return The value of the 'phoneList' field.
   */
  public java.util.List<java.lang.CharSequence> getPhoneList() {
    return phoneList;
  }


  /**
   * Sets the value of the 'phoneList' field.
   * @param value the value to set.
   */
  public void setPhoneList(java.util.List<java.lang.CharSequence> value) {
    this.phoneList = value;
  }

  /**
   * Creates a new Form RecordBuilder.
   * @return A new Form RecordBuilder
   */
  public static tr.example.data.Form.Builder newBuilder() {
    return new tr.example.data.Form.Builder();
  }

  /**
   * Creates a new Form RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Form RecordBuilder
   */
  public static tr.example.data.Form.Builder newBuilder(tr.example.data.Form.Builder other) {
    if (other == null) {
      return new tr.example.data.Form.Builder();
    } else {
      return new tr.example.data.Form.Builder(other);
    }
  }

  /**
   * Creates a new Form RecordBuilder by copying an existing Form instance.
   * @param other The existing instance to copy.
   * @return A new Form RecordBuilder
   */
  public static tr.example.data.Form.Builder newBuilder(tr.example.data.Form other) {
    if (other == null) {
      return new tr.example.data.Form.Builder();
    } else {
      return new tr.example.data.Form.Builder(other);
    }
  }

  /**
   * RecordBuilder for Form instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Form>
    implements org.apache.avro.data.RecordBuilder<Form> {

    private tr.example.data.User user;
    private tr.example.data.User.Builder userBuilder;
    private java.lang.CharSequence city;
    private java.lang.CharSequence street;
    private java.lang.CharSequence addressType;
    private java.util.List<java.lang.CharSequence> phoneList;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(tr.example.data.Form.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasUserBuilder()) {
        this.userBuilder = tr.example.data.User.newBuilder(other.getUserBuilder());
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.addressType)) {
        this.addressType = data().deepCopy(fields()[3].schema(), other.addressType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.phoneList)) {
        this.phoneList = data().deepCopy(fields()[4].schema(), other.phoneList);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing Form instance
     * @param other The existing instance to copy.
     */
    private Builder(tr.example.data.Form other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.user)) {
        this.user = data().deepCopy(fields()[0].schema(), other.user);
        fieldSetFlags()[0] = true;
      }
      this.userBuilder = null;
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.addressType)) {
        this.addressType = data().deepCopy(fields()[3].schema(), other.addressType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.phoneList)) {
        this.phoneList = data().deepCopy(fields()[4].schema(), other.phoneList);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'user' field.
      * @return The value.
      */
    public tr.example.data.User getUser() {
      return user;
    }


    /**
      * Sets the value of the 'user' field.
      * @param value The value of 'user'.
      * @return This builder.
      */
    public tr.example.data.Form.Builder setUser(tr.example.data.User value) {
      validate(fields()[0], value);
      this.userBuilder = null;
      this.user = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'user' field has been set.
      * @return True if the 'user' field has been set, false otherwise.
      */
    public boolean hasUser() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'user' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public tr.example.data.User.Builder getUserBuilder() {
      if (userBuilder == null) {
        if (hasUser()) {
          setUserBuilder(tr.example.data.User.newBuilder(user));
        } else {
          setUserBuilder(tr.example.data.User.newBuilder());
        }
      }
      return userBuilder;
    }

    /**
     * Sets the Builder instance for the 'user' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public tr.example.data.Form.Builder setUserBuilder(tr.example.data.User.Builder value) {
      clearUser();
      userBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'user' field has an active Builder instance
     * @return True if the 'user' field has an active Builder instance
     */
    public boolean hasUserBuilder() {
      return userBuilder != null;
    }

    /**
      * Clears the value of the 'user' field.
      * @return This builder.
      */
    public tr.example.data.Form.Builder clearUser() {
      user = null;
      userBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public tr.example.data.Form.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public tr.example.data.Form.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'street' field.
      * @return The value.
      */
    public java.lang.CharSequence getStreet() {
      return street;
    }


    /**
      * Sets the value of the 'street' field.
      * @param value The value of 'street'.
      * @return This builder.
      */
    public tr.example.data.Form.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.street = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'street' field has been set.
      * @return True if the 'street' field has been set, false otherwise.
      */
    public boolean hasStreet() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'street' field.
      * @return This builder.
      */
    public tr.example.data.Form.Builder clearStreet() {
      street = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'addressType' field.
      * @return The value.
      */
    public java.lang.CharSequence getAddressType() {
      return addressType;
    }


    /**
      * Sets the value of the 'addressType' field.
      * @param value The value of 'addressType'.
      * @return This builder.
      */
    public tr.example.data.Form.Builder setAddressType(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.addressType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'addressType' field has been set.
      * @return True if the 'addressType' field has been set, false otherwise.
      */
    public boolean hasAddressType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'addressType' field.
      * @return This builder.
      */
    public tr.example.data.Form.Builder clearAddressType() {
      addressType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'phoneList' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getPhoneList() {
      return phoneList;
    }


    /**
      * Sets the value of the 'phoneList' field.
      * @param value The value of 'phoneList'.
      * @return This builder.
      */
    public tr.example.data.Form.Builder setPhoneList(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.phoneList = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'phoneList' field has been set.
      * @return True if the 'phoneList' field has been set, false otherwise.
      */
    public boolean hasPhoneList() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'phoneList' field.
      * @return This builder.
      */
    public tr.example.data.Form.Builder clearPhoneList() {
      phoneList = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Form build() {
      try {
        Form record = new Form();
        if (userBuilder != null) {
          try {
            record.user = this.userBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("user"));
            throw e;
          }
        } else {
          record.user = fieldSetFlags()[0] ? this.user : (tr.example.data.User) defaultValue(fields()[0]);
        }
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.street = fieldSetFlags()[2] ? this.street : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.addressType = fieldSetFlags()[3] ? this.addressType : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.phoneList = fieldSetFlags()[4] ? this.phoneList : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Form>
    WRITER$ = (org.apache.avro.io.DatumWriter<Form>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Form>
    READER$ = (org.apache.avro.io.DatumReader<Form>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.user.customEncode(out);

    out.writeString(this.city);

    out.writeString(this.street);

    out.writeString(this.addressType);

    long size0 = this.phoneList.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.phoneList) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.user == null) {
        this.user = new tr.example.data.User();
      }
      this.user.customDecode(in);

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      this.street = in.readString(this.street instanceof Utf8 ? (Utf8)this.street : null);

      this.addressType = in.readString(this.addressType instanceof Utf8 ? (Utf8)this.addressType : null);

      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.phoneList;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("phoneList").schema());
        this.phoneList = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.user == null) {
            this.user = new tr.example.data.User();
          }
          this.user.customDecode(in);
          break;

        case 1:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 2:
          this.street = in.readString(this.street instanceof Utf8 ? (Utf8)this.street : null);
          break;

        case 3:
          this.addressType = in.readString(this.addressType instanceof Utf8 ? (Utf8)this.addressType : null);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.phoneList;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("phoneList").schema());
            this.phoneList = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










